openapi: 3.0.3
info:
  title: BookList API
  version: 0.0.0
paths:
  /accounts/api/login/:
    post:
      operationId: accounts_api_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /accounts/api/profile/{id}/:
    get:
      operationId: accounts_api_profile_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: accounts_api_profile_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: accounts_api_profile_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: accounts_api_profile_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /accounts/api/register/:
    post:
      operationId: accounts_api_register_create
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
  /accounts/api/token/refresh/:
    post:
      operationId: accounts_api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /accounts/api/token/verify/:
    post:
      operationId: accounts_api_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /api/v1/authors/:
    get:
      operationId: api_v1_authors_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAuthorList'
          description: ''
    post:
      operationId: api_v1_authors_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Author'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
          description: ''
  /api/v1/authors/{id}/:
    get:
      operationId: api_v1_authors_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this author.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
          description: ''
    put:
      operationId: api_v1_authors_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this author.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Author'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
          description: ''
    patch:
      operationId: api_v1_authors_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this author.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAuthor'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAuthor'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAuthor'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
          description: ''
    delete:
      operationId: api_v1_authors_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this author.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/books/:
    get:
      operationId: api_v1_books_list
      parameters:
      - in: query
        name: genre
        schema:
          type: string
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBookOnReadList'
          description: ''
    post:
      operationId: api_v1_books_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookOnWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BookOnWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BookOnWrite'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookOnWrite'
          description: ''
  /api/v1/books/{id}/:
    get:
      operationId: api_v1_books_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this book.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookOnRead'
          description: ''
    put:
      operationId: api_v1_books_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this book.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookOnWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BookOnWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BookOnWrite'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookOnWrite'
          description: ''
    patch:
      operationId: api_v1_books_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this book.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBookOnWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBookOnWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBookOnWrite'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookOnWrite'
          description: ''
    delete:
      operationId: api_v1_books_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this book.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/genres/:
    get:
      operationId: api_v1_genres_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedGenreList'
          description: ''
    post:
      operationId: api_v1_genres_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genre'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Genre'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Genre'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
  /api/v1/genres/{id}/:
    get:
      operationId: api_v1_genres_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this genre.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
    put:
      operationId: api_v1_genres_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this genre.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genre'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Genre'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Genre'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
    patch:
      operationId: api_v1_genres_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this genre.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedGenre'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedGenre'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedGenre'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
    delete:
      operationId: api_v1_genres_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this genre.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/list-followers/:
    get:
      operationId: api_v1_list_followers_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedListFollowerOnReadList'
          description: ''
    post:
      operationId: api_v1_list_followers_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFollowerOnWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ListFollowerOnWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListFollowerOnWrite'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFollowerOnWrite'
          description: ''
  /api/v1/list-followers/{id}/:
    get:
      operationId: api_v1_list_followers_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this list follower.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFollowerOnRead'
          description: ''
    put:
      operationId: api_v1_list_followers_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this list follower.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFollowerOnWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ListFollowerOnWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListFollowerOnWrite'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFollowerOnWrite'
          description: ''
    patch:
      operationId: api_v1_list_followers_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this list follower.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedListFollowerOnWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedListFollowerOnWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedListFollowerOnWrite'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFollowerOnWrite'
          description: ''
    delete:
      operationId: api_v1_list_followers_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this list follower.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/list-items/:
    get:
      operationId: api_v1_list_items_list
      parameters:
      - in: query
        name: genre
        schema:
          type: string
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedListItemOnReadList'
          description: ''
    post:
      operationId: api_v1_list_items_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListItemOnWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ListItemOnWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListItemOnWrite'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListItemOnWrite'
          description: ''
  /api/v1/list-items/{id}/:
    get:
      operationId: api_v1_list_items_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this list item.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListItemOnRead'
          description: ''
    put:
      operationId: api_v1_list_items_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this list item.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListItemOnWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ListItemOnWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListItemOnWrite'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListItemOnWrite'
          description: ''
    patch:
      operationId: api_v1_list_items_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this list item.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedListItemOnWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedListItemOnWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedListItemOnWrite'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListItemOnWrite'
          description: ''
    delete:
      operationId: api_v1_list_items_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this list item.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/lists/:
    get:
      operationId: api_v1_lists_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedListOnReadList'
          description: ''
    post:
      operationId: api_v1_lists_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListOnWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ListOnWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListOnWrite'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOnWrite'
          description: ''
  /api/v1/lists/{id}/:
    get:
      operationId: api_v1_lists_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this list.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOnRead'
          description: ''
    put:
      operationId: api_v1_lists_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this list.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListOnWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ListOnWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListOnWrite'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOnWrite'
          description: ''
    patch:
      operationId: api_v1_lists_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this list.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedListOnWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedListOnWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedListOnWrite'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOnWrite'
          description: ''
    delete:
      operationId: api_v1_lists_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this list.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/reviews/:
    get:
      operationId: api_v1_reviews_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReviewOnReadList'
          description: ''
    post:
      operationId: api_v1_reviews_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewOnWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReviewOnWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReviewOnWrite'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewOnWrite'
          description: ''
  /api/v1/reviews/{id}/:
    get:
      operationId: api_v1_reviews_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this review.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewOnRead'
          description: ''
    put:
      operationId: api_v1_reviews_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this review.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewOnWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReviewOnWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReviewOnWrite'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewOnWrite'
          description: ''
    patch:
      operationId: api_v1_reviews_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this review.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReviewOnWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReviewOnWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReviewOnWrite'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewOnWrite'
          description: ''
    delete:
      operationId: api_v1_reviews_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this review.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/users/:
    get:
      operationId: api_v1_users_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
  /api/v1/users/{id}/:
    get:
      operationId: api_v1_users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this пользователь.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        bio:
          type: string
      required:
      - id
      - name
    AuthorInsert:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
      required:
      - id
      - name
    BookInsert:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
      required:
      - id
      - title
    BookOnRead:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        genre:
          $ref: '#/components/schemas/GenreInsert'
        author:
          $ref: '#/components/schemas/AuthorInsert'
        title:
          type: string
          maxLength: 255
        release_date:
          type: string
          format: date
        description:
          type: string
        poster:
          type: string
          format: uri
          nullable: true
        avg_rating:
          type: number
          format: double
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - author
      - created_at
      - genre
      - id
      - release_date
      - title
    BookOnWrite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        release_date:
          type: string
          format: date
        description:
          type: string
        poster:
          type: string
          format: uri
          nullable: true
        avg_rating:
          type: number
          format: double
        created_at:
          type: string
          format: date-time
          readOnly: true
        genre:
          type: integer
        author:
          type: integer
      required:
      - author
      - created_at
      - genre
      - id
      - release_date
      - title
    Genre:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
      required:
      - id
      - name
    GenreInsert:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
      required:
      - id
      - name
    ListFollowerOnRead:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        list:
          $ref: '#/components/schemas/ListInsert'
        user:
          $ref: '#/components/schemas/UserInsert'
      required:
      - id
      - list
      - user
    ListFollowerOnWrite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        list:
          type: integer
      required:
      - id
      - list
    ListInsert:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
      required:
      - id
      - name
    ListItemOnRead:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        list:
          $ref: '#/components/schemas/ListInsert'
        book:
          $ref: '#/components/schemas/BookInsert'
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - book
      - created_at
      - id
      - list
    ListItemOnWrite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        list:
          type: integer
        book:
          type: integer
      required:
      - book
      - created_at
      - id
      - list
    ListOnRead:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          $ref: '#/components/schemas/UserInsert'
        name:
          type: string
          maxLength: 255
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        followers_count:
          type: integer
      required:
      - created_at
      - id
      - name
      - user
    ListOnWrite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        followers_count:
          type: integer
      required:
      - created_at
      - id
      - name
    PaginatedAuthorList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Author'
    PaginatedBookOnReadList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/BookOnRead'
    PaginatedGenreList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
    PaginatedListFollowerOnReadList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/ListFollowerOnRead'
    PaginatedListItemOnReadList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/ListItemOnRead'
    PaginatedListOnReadList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/ListOnRead'
    PaginatedReviewOnReadList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/ReviewOnRead'
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PatchedAuthor:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        bio:
          type: string
    PatchedBookOnWrite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        release_date:
          type: string
          format: date
        description:
          type: string
        poster:
          type: string
          format: uri
          nullable: true
        avg_rating:
          type: number
          format: double
        created_at:
          type: string
          format: date-time
          readOnly: true
        genre:
          type: integer
        author:
          type: integer
    PatchedGenre:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
    PatchedListFollowerOnWrite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        list:
          type: integer
    PatchedListItemOnWrite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        list:
          type: integer
        book:
          type: integer
    PatchedListOnWrite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        followers_count:
          type: integer
    PatchedReviewOnWrite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        rating:
          type: integer
          maximum: 5
          minimum: 1
        review_text:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        book:
          type: integer
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          title: Имя пользователя
          description: Обязательное поле. Не более 150 символов. Только буквы, цифры
            и символы @/./+/-/_.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          title: Имя
          maxLength: 150
        last_name:
          type: string
          title: Фамилия
          maxLength: 150
        profile:
          $ref: '#/components/schemas/Profile'
    Profile:
      type: object
      properties:
        profile_img:
          type: string
          format: uri
        bio:
          type: string
          nullable: true
    Register:
      type: object
      properties:
        username:
          type: string
          title: Имя пользователя
          description: Обязательное поле. Не более 150 символов. Только буквы, цифры
            и символы @/./+/-/_.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
        confirm_password:
          type: string
          writeOnly: true
      required:
      - confirm_password
      - password
      - username
    ReviewOnRead:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          $ref: '#/components/schemas/UserInsert'
        book:
          $ref: '#/components/schemas/BookInsert'
        rating:
          type: integer
          maximum: 5
          minimum: 1
        review_text:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - book
      - created_at
      - id
      - rating
      - user
    ReviewOnWrite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        rating:
          type: integer
          maximum: 5
          minimum: 1
        review_text:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        book:
          type: integer
      required:
      - book
      - created_at
      - id
      - rating
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          title: Имя пользователя
          description: Обязательное поле. Не более 150 символов. Только буквы, цифры
            и символы @/./+/-/_.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          title: Имя
          maxLength: 150
        last_name:
          type: string
          title: Фамилия
          maxLength: 150
        profile:
          $ref: '#/components/schemas/Profile'
      required:
      - id
      - username
    UserInsert:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          title: Имя пользователя
          description: Обязательное поле. Не более 150 символов. Только буквы, цифры
            и символы @/./+/-/_.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - id
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
